local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = game:GetService("Workspace").CurrentCamera

-- Create the UI for displaying the closest player
local ScreenGui = Instance.new("ScreenGui")
local TextLabel = Instance.new("TextLabel")
local ImageLabel = Instance.new("ImageLabel")
local HealthBarBackground = Instance.new("Frame")
local HealthBar = Instance.new("Frame")
local FOVCircle

-- Configure the ScreenGui
ScreenGui.Name = "ClosestPlayerUI"
ScreenGui.Parent = game:GetService("CoreGui")

-- Configure the TextLabel for player info
TextLabel.Name = "ClosestPlayerLabel"
TextLabel.Parent = ScreenGui
TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BackgroundTransparency = 0.5
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(0.5, -100, 1, -160)
TextLabel.Size = UDim2.new(0, 200, 0, 50)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.TextSize = 24
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Text = "N/A (0m)"
TextLabel.Visible = false

-- Configure the ImageLabel for avatar
ImageLabel.Name = "ClosestPlayerAvatar"
ImageLabel.Parent = ScreenGui
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0.5, -150, 1, -160)
ImageLabel.Size = UDim2.new(0, 40, 0, 40)
ImageLabel.Image = ""
ImageLabel.Visible = false

-- Configure the HealthBarBackground
HealthBarBackground.Name = "HealthBarBackground"
HealthBarBackground.Parent = ScreenGui
HealthBarBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
HealthBarBackground.BackgroundTransparency = 0.5
HealthBarBackground.BorderSizePixel = 0
HealthBarBackground.Position = UDim2.new(0.5, -100, 1, -110)
HealthBarBackground.Size = UDim2.new(0, 200, 0, 30)
HealthBarBackground.Visible = false

-- Configure the HealthBar
HealthBar.Name = "HealthBar"
HealthBar.Parent = HealthBarBackground
HealthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
HealthBar.BorderSizePixel = 0
HealthBar.Size = UDim2.new(1, 0, 1, 0)

-- Variables to control the display
local displayEnabled = false
local tracersEnabled = false
local tracers = {}
local displayBoxesEnabled = false
local playerBoxes = {}
local aimbotEnabled = false
local fovCircleEnabled = false
local fovRadius = 100
local aimbotSmoothness = 0.1 -- Default smoothness value

-- Function to find the closest player within the FOV circle
local function getClosestPlayer()
    local localPlayer = Players.LocalPlayer
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local screenPoint, onScreen = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude

            if onScreen and distanceFromCenter < fovRadius then
                local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer, shortestDistance
end

-- Function to update the UI with the closest player information
local function updateClosestPlayerUI()
    local closestPlayer, distance = getClosestPlayer()
    if closestPlayer then
        TextLabel.Text = string.format("%s (%.2fm)", closestPlayer.Name, distance)
        ImageLabel.Image = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. closestPlayer.UserId .. "&width=48&height=48&format=png"

        local humanoid = closestPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            HealthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
        else
            HealthBar.Size = UDim2.new(0, 0, 1, 0)
        end
    else
        TextLabel.Text = "N/A (0m)"
        ImageLabel.Image = ""
        HealthBar.Size = UDim2.new(0, 0, 1, 0)
    end
end

-- Function to update tracers
local function updateTracers()
    -- Clear all previous tracers
    for _, tracer in pairs(tracers) do
        tracer.Visible = false
    end

    if not tracersEnabled then
        return
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local tracer = tracers[player] or Drawing.new("Line")
            tracers[player] = tracer

            local humanoidRootPart = player.Character.HumanoidRootPart
            local screenPoint, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)

            if onScreen then
                tracer.Visible = true
                tracer.Color = Color3.new(1, 1, 1)  -- White color
                tracer.Transparency = 0.5  -- 50% transparency
                tracer.Thickness = 1
                tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                tracer.To = Vector2.new(screenPoint.X, screenPoint.Y)
            else
                tracer.Visible = false
            end
        end
    end
end

-- Function to update player boxes
local function updatePlayerBoxes()
    -- Clear all previous boxes
    for _, boxData in pairs(playerBoxes) do
        boxData.box.Visible = false
        boxData.label.Visible = false
    end

    if not displayBoxesEnabled then
        return
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character.HumanoidRootPart
            local rootPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)

            if onScreen then
                local box = playerBoxes[player] and playerBoxes[player].box or Drawing.new("Square")
                local label = playerBoxes[player] and playerBoxes[player].label or Drawing.new("Text")

                playerBoxes[player] = { box = box, label = label }

                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                local head = player.Character:FindFirstChild("Head")
                local headPosition = Camera:WorldToViewportPoint(head.Position)
                local rootPosition = Camera:WorldToViewportPoint(humanoidRootPart.Position)
                local headScreenPosition = Vector2.new(headPosition.X, headPosition.Y)
                local torsoScreenPosition = Vector2.new(rootPosition.X, rootPosition.Y)

                box.Visible = true
                box.Color = Color3.new(1, 1, 1) -- White color
                box.Thickness = 2
                box.Transparency = 1
                box.Filled = false
                box.Size = Vector2.new(40, 60) -- Box size
                box.Position = torsoScreenPosition - (box.Size / 2)

                label.Visible = true
                label.Text = player.Name
                label.Color = Color3.new(1, 1, 1) -- White color
                label.Size = 18
                label.Center = true
                label.Outline = true
                label.Position = headScreenPosition - Vector2.new(0, 20) -- Position above the player's head
            end
        end
    end
end

-- Function to update the FOV circle
local function updateFOVCircle()
    if not FOVCircle then
        FOVCircle = Drawing.new("Circle")
        FOVCircle.Color = Color3.new(1, 1, 1)
        FOVCircle.Thickness = 2
        FOVCircle.NumSides = 64
        FOVCircle.Filled = false
        FOVCircle.Transparency = 1
    end

    if fovCircleEnabled then
        FOVCircle.Radius = fovRadius
        FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        FOVCircle.Visible = true
    else
        FOVCircle.Visible = false
    end
end

-- Function to handle aimbot
local function handleAimbot()
    if not aimbotEnabled then
        return
    end

    local closestPlayer = getClosestPlayer()
    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = closestPlayer.Character.HumanoidRootPart
        local targetPosition = humanoidRootPart.Position

        -- Smooth camera adjustment
        local cameraPosition = Camera.CFrame.Position
        local direction = (targetPosition - cameraPosition).Unit
        local targetCFrame = CFrame.new(cameraPosition, cameraPosition + direction)
        Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, aimbotSmoothness) -- Adjust the lerp factor for smoothness
    end
end

-- Update the UI, tracers, and aimbot every frame
RunService.RenderStepped:Connect(function()
    if displayEnabled then
        updateClosestPlayerUI()
        TextLabel.Visible = true
        ImageLabel.Visible = true
        HealthBarBackground.Visible = true
    else
        TextLabel.Visible = false
        ImageLabel.Visible = false
        HealthBarBackground.Visible = false
    end

    updateTracers()
    updatePlayerBoxes()
    updateFOVCircle()
    handleAimbot()
end)

-- Existing functionalities

local function isNumber(str)
    return tonumber(str) ~= nil or str == 'inf'
end

getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.9

getgenv().HitboxStatus = false
getgenv().TeamCheck = false

getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower

getgenv().TPSpeed = 3
getgenv().TPWalk = false

getgenv().Noclip = false
getgenv().XRay = false

local distanceEnabled = false
local distanceLabels = {}

--// UI

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Vcsk/UI-Library/main/Source/MyUILib(Unamed).lua"))()
local Window = Library:Create("Original's Hub - Left Alt or Option to hide ui")

-- Function to handle reopening the UI with Left Alt or Option key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.LeftAlt or input.KeyCode == Enum.KeyCode.LeftOption then
            Library:ToggleUI()
        end
    end
end)

local LocalPlayerTab = Window:Tab("Local Player", "rbxassetid://12296135476")
local VisualTab = Window:Tab("Visuals", "rbxassetid://12308581351")
local GunTab = Window:Tab("Gun", "rbxassetid://139509416388414")

LocalPlayerTab:TextBox("WalkSpeed", function(value)
    getgenv().Walkspeed = value
    pcall(function()
        game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = value
    end)
end)

LocalPlayerTab:Toggle("Loop WalkSpeed", function(state)
    getgenv().loopW = state
    game:GetService("RunService").Heartbeat:Connect(function()
        if loopW == true then
            pcall(function()
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Walkspeed
            end)
        end
    end)
end)

LocalPlayerTab:TextBox("JumpPower", function(value)
    getgenv().Jumppower = value
    pcall(function()
        game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = value
    end)
end)

LocalPlayerTab:Toggle("Loop JumpPower", function(state)
    getgenv().loopJ = state
    game:GetService("RunService").Heartbeat:Connect(function()
        if loopJ == true then
            pcall(function()
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Jumppower
            end)
        end
    end)
end)

LocalPlayerTab:TextBox("TP Speed", function(value)
    getgenv().TPSpeed = value
end)

LocalPlayerTab:Toggle("TP Walk", function(s)
    getgenv().TPWalk = s
    local hb = game:GetService("RunService").Heartbeat
    local player = game:GetService("Players")
    local lplr = player.LocalPlayer
    local chr = lplr.Character
    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
    while getgenv().TPWalk and hb:Wait() and chr and hum and hum.Parent do
        if hum.MoveDirection.Magnitude > 0 then
            if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
                chr:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
            else
                chr:TranslateBy(hum.MoveDirection)
            end
        end
    end
end)

LocalPlayerTab:Slider("Fov", game.Workspace.CurrentCamera.FieldOfView, 120, function(v)
    game.Workspace.CurrentCamera.FieldOfView = v
end)

LocalPlayerTab:Toggle("Noclip", function(s)
    getgenv().Noclip = s
    if getgenv().Noclip then
        noclipLoop = RunService.Stepped:Connect(function()
            for _, part in pairs(Players.LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
            -- Move the character upwards if the jump key is pressed
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                Players.LocalPlayer.Character:TranslateBy(Vector3.new(0, 3, 0))
            end
        end)
    else
        if noclipLoop then
            noclipLoop:Disconnect()
        end
        for _, part in pairs(Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end)

LocalPlayerTab:Toggle("X-Ray", function(s)
    getgenv().XRay = s
    local function setTransparency(transparency)
        for _, object in pairs(game.Workspace:GetDescendants()) do
            if object:IsA("BasePart") then
                object.Transparency = transparency
            end
        end
    end
    if getgenv().XRay then
        setTransparency(0.5) -- Set transparency to 50%
    else
        setTransparency(0) -- Reset transparency
    end
end)

LocalPlayerTab:Toggle("Infinite Jump", function(s)
    getgenv().InfJ = s
    game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            local humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid'
            if humanoid then
                humanoid:ChangeState("Jumping")
                humanoid.JumpPower = getgenv().Jumppower
                humanoid:Move(Vector3.new(0, getgenv().Jumppower, 0), true)
            end
        end
    end)
end)

LocalPlayerTab:Button("Rejoin", function()
    game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end)

VisualTab:InfoLabel("Wait 3-10 seconds")

VisualTab:Toggle("Character Highlight", function(state)
    getgenv().enabled = state -- Toggle on/off
    getgenv().filluseteamcolor = true -- Toggle fill color using player team color on/off
    getgenv().outlineuseteamcolor = true -- Toggle outline color using player team color on/off
    getgenv().fillcolor = Color3.new(0, 0, 0) -- Change fill color, no need to edit if using team color
    getgenv().outlinecolor = Color3.new(1, 1, 1) -- Change outline color, no need to edit if using team color
    getgenv().filltrans = 0.5 -- Change fill transparency
    getgenv().outlinetrans = 0.5 -- Change outline transparency

    loadstring(game:HttpGet("https://raw.githubusercontent.com/Vcsk/RobloxScripts/main/Highlight-ESP.lua"))()
end)

-- Toggle button for displaying closest player information
VisualTab:Toggle("Display Closest Player", function(state)
    displayEnabled = state
end)

-- Toggle button for displaying tracers
VisualTab:Toggle("Display Tracers", function(state)
    tracersEnabled = state
end)

-- Toggle button for displaying boxes around players
VisualTab:Toggle("Boxes", function(state)
    displayBoxesEnabled = state
end)

-- Gun Tab Aimbot and FOV Circle
GunTab:Toggle("Enable Aimbot", function(state)
    aimbotEnabled = state
end)

GunTab:Toggle("Enable FOV Circle", function(state)
    fovCircleEnabled = state
end)

GunTab:Slider("FOV Radius", 50, 300, function(value)
    fovRadius = value
end)

-- Aimbot Smoothness Modifier
GunTab:Slider("Aimbot Smoothness", 0, 10, function(value)
    aimbotSmoothness = value / 10  -- Divide by 10 to get increments of 0.1
end)
